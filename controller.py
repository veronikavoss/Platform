from setting import *
from tile import Tile
from player import Player

class Controller:
    def __init__(self,screen,asset):
        self.screen=screen
        self.asset=asset
        self.level=1
        self.level_data()
        self.tiles=pygame.sprite.Group()
        self.player=pygame.sprite.GroupSingle()
    
    def level_data(self):
        self.levels={
            'level_1':[
                ['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
                ['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
                ['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
                ['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
                ['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
                ['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
                ['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
                ['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
                ['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
                ['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
                ['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
                ['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
                ['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
                ['1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
                ['1','0','0','0','1','1','1','1','0','0','0','0','0','0','0','1','1','1','1','0','0','0','0','0','0','0','0','0','0','0','0','0'],
                ['1','0','p','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
                ['1','0','0','0','0','0','0','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
                ['1','1','1','1','1','1','1','0','0','0','1','1','1','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0']
            ]
        }
    
    def set_map(self):
        for row_index,column in enumerate(self.levels[f'level_{self.level}']):
            for column_index,value in enumerate(column):
                x=column_index*tile_w
                y=row_index*tile_h
                if value=='1':
                    self.tiles.add(Tile(x,y))
                if value=='p':
                    self.player.add(Player(self.asset,(x,y)))
    
    def collision(self):
        player=self.player.sprite
        
        player.rect.x+=player.dx
        for tile in self.tiles:
            if pygame.sprite.collide_mask(player,tile):
                if player.dx<0:
                    player.rect.left=tile.rect.right
                elif player.dx>0:
                    player.rect.right=tile.rect.left
        
        # player.dy+=player.gravity
        # player.rect.y+=player.dy
        # for tile in self.tiles:
        #     if pygame.sprite.collide_mask(player,tile):
        #         if player.dy>=0:
        #             player.dy=0
        #             player.rect.bottom=tile.rect.top
    
    def update(self):
        self.player.update(self.tiles)
        # self.collision()
    
    def draw(self):
        self.tiles.draw(self.screen)
        self.player.draw(self.screen)